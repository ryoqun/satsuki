%class Turnstile
%package Turnstile

%start MainMap::Normal

%map MainMap
%%
Normal
{
  keydown(event: KeyEvent) [ event.name == "space" ]
    push(PreSpace)
    {}
  keydown(event: KeyEvent) [ event.name == "slash" ]
    push(PreSlashControl)
    {}
  keydown(event: KeyEvent) [ event.name == "z" ]
    push(PreZKeyControl)
    {}
  keydown(event: KeyEvent) [ event.name == "shift" ]
    push(Shift)
    {}
  keydown(event: KeyEvent) [ event.name == "tenkey" ]
    push(Tenkey)
    {}
  keydown(event: KeyEvent)
    nil
    { emit(event); }
}

Shift
  Entry { shift_mode(True); }
  Exit { shift_mode(False); }
{
  keydown(event: KeyEvent)
    nil
    { emit(event); }
  keyup(event: KeyEvent) [ event.name == "shift" ]
    pop
    {}
  keyup(event: KeyEvent)
    nil
    { emit(event); }
}

Tenkey
  Entry { tenkey_mode(True); }
  Exit { tenkey_mode(False); }
{
  keydown(event: KeyEvent)
    nil
    { emit(event); }
  keyup(event: KeyEvent) [ event.name == "tenkey" ]
    pop
    {}
  keyup(event: KeyEvent)
    nil
    { emit(event); }
}

PreSpace {
  keyup(event: KeyEvent) [ event.name == "space" ]
    pop
    { emit_space(); }

  keydown(event: KeyEvent) [ event.name == "slash" ]
    Space/push(PreSlashControl)
    {}

  keydown(event: KeyEvent) [ event.name == "z" ]
    Space/push(PreZKeyControl)
    {}

  keydown(event: KeyEvent) [ event.name == "space" ]
    Space
    {}

  keydown(event: KeyEvent)
    Space
    { space_mode(True); emit(event); }
}

Space
  Entry { space_mode(True); }
  Exit { space_mode(False); }
{
  keydown(event: KeyEvent) [ event.name == "slash" ]
    push(PreSlashControl)
    {}

  keydown(event: KeyEvent) [ event.name == "z" ]
    push(PreZKeyControl)
    {}

  keydown(event: KeyEvent) [ event.name == "space" ]
    nil
    {}

  keydown(event: KeyEvent)
    nil
    { emit(event); }

  keyup(event: KeyEvent) [ event.name == "space" ]
    pop
    {}

  keyup(event: KeyEvent)
    nil
    { emit(event); }
}

PreZKeyControl {
  keydown(event: KeyEvent) [ event.name == "z" ]
    ZKeyControl
    {}

  keydown(event: KeyEvent) [ event.name == "space" ]
    ZKeyControl/push(PreSpace)
    {}

  keydown(event: KeyEvent)
    SemiZKeyControl
    { buffer(event);}

  keyup(event: KeyEvent) [ event.name == "z" ]
    pop
    { emit_z(); }
}

PreSlashControl {
  keydown(event: KeyEvent) [ event.name == "slash" ]
    SlashControl
    {}

  keydown(event: KeyEvent) [ event.name == "space" ]
    SlashControl/push(PreSpace)
    {}

  keydown(event: KeyEvent)
    SemiSlashControl
    { buffer(event); }

  keyup(event: KeyEvent) [ event.name == "slash" ]
    pop
    { emit_slash(); }
}

SemiZKeyControl {
  keydown(event: KeyEvent)
    ZKeyControl
    { control_mode(True); flush(); emit(event); }

  keyup(event: KeyEvent) [ event.name == "z" ]
    pop
    { emit_z(); flush(); emit(event); }

  keyup(event: KeyEvent)
    ZKeyControl
    { control_mode(True); flush(); emit(event); }
}

SemiSlashControl {
  keydown(event: KeyEvent)
    SlashControl
    { control_mode(True); flush(); emit(event); }

  keyup(event: KeyEvent) [ event.name == "slash" ]
    pop
    { emit_slash(); flush(); emit(event); }

  keyup(event: KeyEvent)
    SlashControl
    { control_mode(True); flush(); emit(event); }
}

ZKeyControl
  Entry { control_mode(True); }
  Exit { control_mode(False); }
{
  keydown(event: KeyEvent) [ event.name == "z" ]
    nil
    {}

  keydown(event: KeyEvent)
    nil
    { emit(event); }

  keyup(event: KeyEvent) [ event.name == "z" ]
    pop
    {}

  keyup(event: KeyEvent)
    nil
    { emit(event); }
}

SlashControl
  Entry { control_mode(True); }
  Exit { control_mode(False); }
{
  keydown(event: KeyEvent) [ event.name == "slash" ]
    nil
    {}

  keydown(event: KeyEvent)
    nil
    { emit(event); }

  keyup(event: KeyEvent) [ event.name == "slash" ]
    pop
    {}

  keyup(event: KeyEvent)
    nil
    { emit(event); }
}
%%
